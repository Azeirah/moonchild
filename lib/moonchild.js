// Generated by CoffeeScript 1.6.3
(function() {
  var ExtensionAPI, addHook, applySafely, createEditor, estraverse, getHookArgs, globalExtensions, globalHooks, hooksDo, onChange, parse, parser, registerExtension, _;

  parser = require('./metadata');

  estraverse = require('estraverse');

  _ = require('underscore');

  globalHooks = {};

  globalExtensions = {};

  ExtensionAPI = (function() {
    function ExtensionAPI() {
      this._id = _.uniqueId('ext-');
      globalExtensions[this._id] = this;
      this._hooks = {};
      this._widgets = [];
      this.on = _.partial(addHook, this._id, globalHooks);
    }

    ExtensionAPI.prototype.addWidget = function(pos, node, type) {
      return this._widgets.push({
        pos: pos,
        node: node,
        type: type
      });
    };

    ExtensionAPI.prototype.addExtras = function(node, data) {
      node._extras || (node._extras = {});
      node._extras[this._id] = data;
    };

    ExtensionAPI.prototype.getExtras = function(node) {
      var _ref;
      return (_ref = node._extras) != null ? _ref[this._id] : void 0;
    };

    ExtensionAPI.prototype.BEFORE = 'before';

    ExtensionAPI.prototype.AFTER = 'after';

    ExtensionAPI.prototype.REPLACE = 'replace';

    return ExtensionAPI;

  })();

  addHook = function(id, hookState, hookName, func) {
    var hooks;
    if (id == null) {
      id = _.uniqueId('hook-');
    }
    hooks = hookState[hookName] != null ? hookState[hookName] : hookState[hookName] = {};
    if (hooks[id] == null) {
      hooks[id] = [];
    }
    hooks[id].push(func);
  };

  hooksDo = function(hook, iter) {
    return _.each(hook, function(hookFns, id) {
      return _.each(hookFns, function(fn) {
        return iter(fn, id);
      });
    });
  };

  registerExtension = function() {
    return new ExtensionAPI;
  };

  parse = function(hooks, source) {
    var hookArgs, tree;
    tree = parser.parse(source);
    hookArgs = getHookArgs(tree);
    hooksDo(globalHooks['parse'], function(func, id) {
      return applySafely(func, hookArgs);
    });
    return tree;
  };

  createEditor = function(el) {
    var editor;
    editor = CodeMirror.fromTextArea(el);
    editor.on('change', _.debounce(onChange, 250));
    editor.setValue(editor.getValue() + ' ');
    return editor;
  };

  getHookArgs = function(ast) {
    var nodes;
    nodes = [];
    estraverse.traverse(ast, {
      enter: function(node) {
        return nodes.push(node);
      }
    });
    return [_.chain(nodes), _.chain(ast.comments)];
  };

  applySafely = function(func, args) {
    var e;
    try {
      return func.apply(null, args);
    } catch (_error) {
      e = _error;
      return console.log(e.stack || e);
    }
  };

  onChange = function(cm, changeObj) {
    var e, extensions, hookArgs, tree;
    try {
      tree = parse(globalHooks, cm.getValue());
    } catch (_error) {
      e = _error;
      console.log(e);
      return;
    }
    extensions = {};
    hookArgs = getHookArgs(tree);
    hooksDo(globalHooks['display'], function(func, id) {
      var ext;
      applySafely(func, hookArgs);
      ext = globalExtensions[id];
      if (ext) {
        return extensions[id] = ext._widgets;
      }
    });
    return hooksDo(globalHooks['render'], function(func, id) {
      return applySafely(func, [extensions]);
    });
  };

  module.exports = {
    createEditor: createEditor,
    on: _.partial(addHook, null, globalHooks),
    parse: parse,
    registerExtension: registerExtension,
    traverse: estraverse.traverse
  };

}).call(this);
