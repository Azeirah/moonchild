// Generated by CoffeeScript 1.7.1
(function() {
  var Extension, addHook, applySafely, estraverse, expanders, exportsExpander, getEditor, getHookArgs, globalEditor, globalExtensions, globalHooks, initializeExtension, invokeHook, onChange, parse, parser, registerExtension, setEditor, widgetExpander, _;

  parser = require('./metadata');

  _ = require('underscore');

  estraverse = require('estraverse');

  expanders = require('expanders');

  globalHooks = {};

  globalExtensions = {};

  globalEditor = {};

  widgetExpander = expanders.createExpander('displayWidget');

  exportsExpander = expanders.createExpander('extensionId');

  Extension = (function() {
    function Extension(id) {
      if (id in globalExtensions) {
        throw new Error("An extension named '" + id + "' is already registered");
      }
      this._id = id || _.uniqueId('ext-');
      this._hooks = {};
      this._expander = expanders.createExpander('extras');
      this.on = _.partial(addHook, this._id, globalHooks);
    }

    Extension.prototype.addWidget = function(pos, node, type, userData) {
      if (widgetExpander.has(node, 'displayWidget')) {
        throw new Error('Conflicting widgets on node');
      }
      widgetExpander.set(node, 'displayWidget', {
        type: type,
        pos: pos,
        data: userData
      });
    };

    Extension.prototype.getWidget = function(node) {
      return widgetExpander.get(node, 'displayWidget');
    };

    Extension.prototype.setExtras = function(node, data) {
      return this._expander.set(node, 'extras', data);
    };

    Extension.prototype.getExtras = function(node, ext) {
      var exp, id;
      exp = ext ? (id = exportsExpander.get(ext, 'extensionId'), globalExtensions[id]._expander) : this._expander;
      return exp.get(node, 'extras');
    };

    Extension.prototype.BEFORE = 'before';

    Extension.prototype.AFTER = 'after';

    Extension.prototype.REPLACE = 'replace';

    return Extension;

  })();

  addHook = function(id, hookState, hookName, func) {
    var hooks;
    if (id == null) {
      id = _.uniqueId('hook-');
    }
    hooks = hookState[hookName] != null ? hookState[hookName] : hookState[hookName] = {};
    if (hooks[id] == null) {
      hooks[id] = [];
    }
    hooks[id].push(func);
  };

  invokeHook = function(hook, args) {
    return _.each(globalHooks[hook], function(hookFns, id) {
      return _.each(hookFns, function(fn) {
        return applySafely(fn, args);
      });
    });
  };

  initializeExtension = function(ext, deps, initFn) {
    var result;
    result = initFn != null ? initFn.apply(null, [ext].concat(deps)) : void 0;
    if (result != null) {
      if (_.isObject(result)) {
        return result;
      }
      throw new TypeError('Invalid export from extension (must be an object)');
    }
    return {};
  };

  registerExtension = function(id, deps, initFn) {
    var ext;
    if (!_.isArray(deps)) {
      initFn = deps;
      deps = [];
    }
    deps = deps.map(function(name) {
      if (!(name in globalExtensions)) {
        throw new Error("Unmet dependency " + name);
      }
      return globalExtensions[name].exports;
    });
    ext = new Extension(id);
    ext.exports = initializeExtension(ext, deps, initFn);
    exportsExpander.set(ext.exports, 'extensionId', ext._id);
    return globalExtensions[ext._id] = ext;
  };

  parse = function(hooks, source) {
    var tree;
    tree = parser.parse(source);
    invokeHook('parse', getHookArgs(tree));
    return tree;
  };

  getHookArgs = function(ast) {
    var nodes;
    nodes = [];
    estraverse.traverse(ast, {
      enter: function(node) {
        return nodes.push(node);
      }
    });
    return [_.chain(nodes), _.chain(ast.comments)];
  };

  applySafely = function(func, args) {
    var e;
    try {
      return func.apply(null, args);
    } catch (_error) {
      e = _error;
      return console.log(e.stack || e);
    }
  };

  onChange = function(newValue) {
    var e, hookArgs, tree;
    try {
      tree = parse(globalHooks, newValue);
    } catch (_error) {
      e = _error;
      console.log(e);
      return;
    }
    hookArgs = getHookArgs(tree);
    invokeHook('display', hookArgs);
    return invokeHook('render', hookArgs);
  };

  setEditor = function(editor) {
    return globalEditor = editor;
  };

  getEditor = function() {
    return globalEditor;
  };

  module.exports = {
    on: _.partial(addHook, null, globalHooks),
    onChange: onChange,
    parse: parse,
    registerExtension: registerExtension,
    traverse: estraverse.traverse,
    setEditor: setEditor,
    getEditor: getEditor
  };

}).call(this);
