// Generated by CoffeeScript 1.6.3
(function() {
  var MAGIC_CHAR, attachMetadata, attachToFollowingNode, attachToPreviousNode, attachToRootNode, containsMetadata, esprima, estraverse, followsOnLine, parse, parseMetadata, parseOptions, _;

  MAGIC_CHAR = '^';

  parseOptions = {
    comment: true,
    loc: true,
    range: true
  };

  parse = function(source) {
    var ast, metadata;
    ast = esprima.parse(source, parseOptions);
    metadata = _.map(_.filter(ast.comments, containsMetadata), parseMetadata);
    attachMetadata(ast, metadata);
    return ast;
  };

  parseMetadata = function(commentNode) {
    var value;
    try {
      value = eval('(' + commentNode.value.slice(1) + ')');
    } catch (_error) {

    }
    commentNode.contents = commentNode.value;
    commentNode.value = _.isObject(value) ? value : void 0;
    return commentNode;
  };

  attachMetadata = function(ast, metadata) {
    var prev;
    prev = null;
    estraverse.traverse(ast, {
      enter: function(node, parent) {
        if (metadata.length === 0) {
          return estraverse.VisitorOption.Break;
        }
        if (node === ast) {
          return attachToRootNode(ast, metadata);
        } else {
          attachToPreviousNode(prev, metadata) || attachToFollowingNode(node, metadata);
          return prev = node;
        }
      }
    });
    if (metadata.length > 0 && !attachToPreviousNode(prev, metadata)) {
      return ast.metadata = metadata[0];
    }
  };

  attachToRootNode = function(node, metadata) {
    if (node.loc.start.line > metadata[0].loc.end.line + 1) {
      return node.metadata = metadata.shift();
    }
  };

  attachToPreviousNode = function(node, metadata) {
    if ((node != null) && followsOnLine(node, metadata[0])) {
      return node.metadata = metadata.shift();
    }
  };

  attachToFollowingNode = function(node, metadata) {
    if (node.range[0] > metadata[0].range[1]) {
      return node.metadata = metadata.shift();
    }
  };

  followsOnLine = function(first, second) {
    return first.range[1] < second.range[0] && first.loc.end.line === second.loc.start.line;
  };

  containsMetadata = function(commentNode) {
    return commentNode.value[0] === MAGIC_CHAR;
  };

  _ = require('underscore');

  esprima = require('esprima');

  estraverse = require('estraverse');

  module.exports = {
    parse: parse
  };

  if ((typeof require !== "undefined" && require !== null ? require.main : void 0) === module) {
    parse(require('fs').readFileSync(process.argv[2]));
  }

}).call(this);
